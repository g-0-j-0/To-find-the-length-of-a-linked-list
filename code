class Node:
    def __init__(self,data=None,next=None):
        self.data=data
        self.next=next

class Linkedlist:
    def __init__(self):
        self.head=None

    def Insert_at_end(self,data):
        if self.head is None:
            self.head =Node(data,None)
            return
        itr=self.head
        while itr.next:
            itr=itr.next
        itr.next=Node(data,None)

    def Insert_values(self,values):
        self.head = None
        for data in values:
            self.Insert_at_end(data)

    def get_length(self):
        count=0
        itr=self.head
        while itr:
            count+=1
            itr=itr.next
        return count

    def remove_element(self, index):
        if 0 > index >= self.get_length():
            raise Exception("Invalid index")

        if index == 0:
            self.head = self.head.next
            return

        count = 0
        itr = self.head
        while itr:
            if count == index - 1:
                itr.next = itr.next.next
                break

            itr = itr.next
            count += 1

    def print(self):
        if self.head is None:
            print("Linked list is empty")
            return
        itr=self.head
        llstr=""
        while itr:
            llstr=llstr+str(itr.data)+"-->"
            itr=itr.next
        print(llstr)

if __name__ == "__main__":
    ll=Linkedlist()
    ll.Insert_values(["In","the","form","of","list"])
    ll.print()
    ll.remove_element(2)
    ll.print()
    print("length:",ll.get_length())
